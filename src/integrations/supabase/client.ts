// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

export async function getSymptoms(userId?: string) {
  if (userId) {
    const { data, error } = await supabase
      .from('symptoms')
      .select('*')
      .eq('user_id', userId)
      .order('timestamp', { ascending: false });
    return { data, error };
  }

  // Get current user's symptoms
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return { data: null, error: 'No authenticated user' };

  const { data, error } = await supabase
    .from('symptoms')
    .select('*')
    .eq('user_id', user.id)
    .order('timestamp', { ascending: false });
  return { data, error };
}

export async function logSymptom(symptomData: { symptom: string; severity: string; userId: string }) {
  const { data, error } = await supabase
    .from('symptoms')
    .insert([
      { symptom: symptomData.symptom, severity: symptomData.severity, user_id: symptomData.userId },
    ]);
  return { data, error };
}
